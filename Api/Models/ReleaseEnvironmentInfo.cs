/*
 * Releases API
 *
 * * View the Release status for a Dev Ops Team Project * Compare Environments * Trigger Releases of multiple Porjects to an Environment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: pauljamesnichols@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReleaseEnvironmentInfo : IEquatable<ReleaseEnvironmentInfo>
    {
        public int Rank { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="Version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum UndefinedEnum for  Undefined
            /// </summary>
            [EnumMember(Value = " Undefined")]
            Undefined = 1,
            
            /// <summary>
            ///  NotStarted for NotStarted
            /// </summary>
            [EnumMember(Value = "NotStarted")]
            NotStarted = 2,
            
            /// <summary>
            ///  InProgress for InProgress
            /// </summary>
            [EnumMember(Value = "InProgress")]
            InProgress = 3,
            
            /// <summary>
            ///  Succeeded for Succeeded
            /// </summary>
            [EnumMember(Value = "Succeeded")]
            Succeeded = 4,
            
            /// <summary>
            ///  Canceled for Canceled
            /// </summary>
            [EnumMember(Value = "Canceled")]
            Canceled = 5,
            
            /// <summary>
            ///  Rejected for Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 6,
            
            /// <summary>
            ///  Queued for Queued
            /// </summary>
            [EnumMember(Value = "Queued")]
            Queued = 7,
            
            /// <summary>
            ///  Scheduled for Scheduled
            /// </summary>
            [EnumMember(Value = "Scheduled")]
            Scheduled = 8,
            
            /// <summary>
            ///  PartiallySucceeded for PartiallySucceeded
            /// </summary>
            [EnumMember(Value = "PartiallySucceeded")]
            PartiallySucceeded = 9
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets Who
        /// </summary>
        [DataMember(Name="Who")]
        public string Who { get; set; }

        /// <summary>
        /// Gets or Sets When
        /// </summary>
        [DataMember(Name="When")]
        public string When { get; set; }
        public int EnvironmentId { get; internal set; }
        public int DefinitionEnvironmentId { get; internal set; }
        public int ReleaseId { get; internal set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReleaseEnvironmentInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Who: ").Append(Who).Append("\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReleaseEnvironmentInfo)obj);
        }

        /// <summary>
        /// Returns true if ReleaseEnvironmentInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ReleaseEnvironmentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseEnvironmentInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Who == other.Who ||
                    Who != null &&
                    Who.Equals(other.Who)
                ) && 
                (
                    When == other.When ||
                    When != null &&
                    When.Equals(other.When)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Who != null)
                    hashCode = hashCode * 59 + Who.GetHashCode();
                    if (When != null)
                    hashCode = hashCode * 59 + When.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReleaseEnvironmentInfo left, ReleaseEnvironmentInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReleaseEnvironmentInfo left, ReleaseEnvironmentInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
