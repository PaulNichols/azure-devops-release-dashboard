/*
 * Releases API
 *
 * * View the Release status for a Dev Ops Team Project * Compare Environments * Trigger Releases of multiple Porjects to an Environment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: pauljamesnichols@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComparisionResultEnvironment : IEquatable<ComparisionResultEnvironment>
    { 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets FromVersion
        /// </summary>
        [DataMember(Name="FromVersion")]
        public string FromVersion { get; set; }

        /// <summary>
        /// Gets or Sets ToVersion
        /// </summary>
        [DataMember(Name="ToVersion")]
        public string ToVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComparisionResultEnvironment {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FromVersion: ").Append(FromVersion).Append("\n");
            sb.Append("  ToVersion: ").Append(ToVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComparisionResultEnvironment)obj);
        }

        /// <summary>
        /// Returns true if ComparisionResultEnvironment instances are equal
        /// </summary>
        /// <param name="other">Instance of ComparisionResultEnvironment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComparisionResultEnvironment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    FromVersion == other.FromVersion ||
                    FromVersion != null &&
                    FromVersion.Equals(other.FromVersion)
                ) && 
                (
                    ToVersion == other.ToVersion ||
                    ToVersion != null &&
                    ToVersion.Equals(other.ToVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (FromVersion != null)
                    hashCode = hashCode * 59 + FromVersion.GetHashCode();
                    if (ToVersion != null)
                    hashCode = hashCode * 59 + ToVersion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComparisionResultEnvironment left, ComparisionResultEnvironment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComparisionResultEnvironment left, ComparisionResultEnvironment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
