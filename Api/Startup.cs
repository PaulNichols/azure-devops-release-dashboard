
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Swashbuckle.AspNetCore.SwaggerGen;
using System;
using System.IO;
using System.Reflection;

namespace Api
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);


            services
                .AddSwaggerGen(c =>
                {
                    c.SwaggerDoc("1.0.0", new Microsoft.OpenApi.Models.OpenApiInfo
                    {
                        Version = "1.0.0",
                        Title = "Releases API",
                        Description = "Releases API (ASP.NET Core 2.0)",
                        Contact = new Microsoft.OpenApi.Models.OpenApiContact()
                        {
                            Name = "Paul Nichols",
                            Url = new Uri( "https://github.com/swagger-api/swagger-codegen"),
                            Email = "pauljamesnichols@gmail.com"
                        },
                    });
                    c.CustomSchemaIds(type => type.FriendlyId(true));
                    c.DescribeAllEnumsAsStrings();
                    //Locate the XML file being generated by ASP.NET...
                    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
                    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                    //... and tell Swagger to use those XML comments.
                    c.IncludeXmlComments(xmlPath);

                    // Sets the basePath property in the Swagger document generated
                    //c.DocumentFilter<BasePathFilter>("/releases");

                    //// Include DataAnnotation attributes on Controller Action parameters as Swagger validation rules (e.g required, pattern, ..)
                    //// Use [ValidateModelState] on Actions to actually validate it in C# as well!
                    //c.OperationFilter<GeneratePathParamsValidationFilter>();
                });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            app
                 .UseMvc()
                 .UseDefaultFiles()
                 .UseStaticFiles()
                 .UseSwagger()
                 .UseSwaggerUI(c =>
                 {
                    //TODO: Either use the SwaggerGen generated Swagger contract (generated from C# classes)
                    c.SwaggerEndpoint("/swagger/1.0.0/swagger.json", "Releases API");

                    //TODO: Or alternatively use the original Swagger contract that's included in the static files
                    // c.SwaggerEndpoint("/swagger-original.json", "Releases API Original");
                });

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                //TODO: Enable production exception handling (https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling)
                // app.UseExceptionHandler("/Home/Error");
            }
        }
    }
}
